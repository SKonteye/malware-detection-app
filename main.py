import streamlit as st
# from PIL import Image
import joblib
import pandas as pd
import numpy as np
import string
import nltk
from nltk.corpus import stopwords
import string
from nltk.stem.porter import PorterStemmer
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
import pefile
from sklearn.preprocessing import StandardScaler

ps = PorterStemmer()

nltk.download('punkt')
nltk.download('stopwords')

def transform_text(text):
    text = text.lower()
    y = []
    # tokenization
    text = nltk.word_tokenize(text)
    for i in text:
        if i.isalnum():
            y.append(i)
    text = y[:]
    y.clear()
    # removing stopwords and punctuations
    for i in text:
        if i not in stopwords.words('english') and i not in string.punctuation:
            y.append(i)
    text = y[:]
    y.clear()

    # stemming applied on text
    for i in text:
        y.append(ps.stem(i))
    return y

# Load the model and vectorizer
model = joblib.load(open('model.pkl', 'rb'))

st.title("Malware Detection")

# content

st.image(Image.open(r'malware_image.jpg'))

st.write("""
Here is a malware detection model that uses machine learning to identify and classify malicious software. It analyzes various features and patterns to determine if a file or program is malware or not.

The algorithm used to train the model is a random forest classifier.
""")

input_file = st.file_uploader("Upload an .exe file for malware detection")

if input_file is not None:
    # 1. Extract characteristics
    pe = pefile.PE(data=input_file.read())
    characteristics = {
        'AddressOfEntryPoint': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
        'MajorLinkerVersion': pe.OPTIONAL_HEADER.MajorLinkerVersion,
        'MajorImageVersion': pe.OPTIONAL_HEADER.MajorImageVersion,
        'MajorOperatingSystemVersion': pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
        'DllCharacteristics': pe.OPTIONAL_HEADER.DllCharacteristics,
        'SizeOfStackReserve': pe.OPTIONAL_HEADER.SizeOfStackReserve,
        'NumberOfSections': pe.FILE_HEADER.NumberOfSections,
        'ResourceSize': pe.sections[0].SizeOfRawData,  # Assuming the first section contains resources

    }

    # 2. Convert characteristics to dataframe
    df = pd.DataFrame([characteristics])
    print(df)
    # 5. Predict
    prediction = model.predict(df)[0]

    # 6. Display
    if prediction == 1:
        st.header("Malware Detected")
    else:
        st.header("Not a Malware Detected")

c1, c2, c3 = st.columns(3)
with c1:
    st.info('**LinkedIn:[@Skonteye](https://www.linkedin.com/in/skonteye)**', icon="üë®‚Äçüíº")
with c2:
    st.info('**LinkedIn:[@Anida](https://www.linkedin.com/in/anida-assane-81720a21b/)**', icon="üë®‚Äçüíº")
with c3:
    st.info('**LinkedIn:[@MameKhary](https://www.linkedin.com/in/mame-khary-seye-b04a09179/)**', icon="üë®‚Äçüíº")
